class Solution {
public:
    bool buddyStrings(string s, string goal) {
    int n = s.length();
    int m = goal.length();
    
    // Check if the lengths of the strings are equal
    if (n != m)
        return false;
    
    // Check if the strings are equal and contain any repeated characters
    if (s == goal) {
        unordered_set<char> uniqueChars;
        for (char c : s) {
            if (uniqueChars.count(c))
                return true;
            uniqueChars.insert(c);
        }
        return false;
    }
    
    // Find the indices where the characters differ
    int firstDiff = -1, secondDiff = -1;
    for (int i = 0; i < n; i++) {
        if (s[i] != goal[i]) {
            if (firstDiff == -1)
                firstDiff = i;
            else if (secondDiff == -1)
                secondDiff = i;
            else
                return false; // More than two differences
        }
    }
    
    // Check if the characters can be swapped to match the goal string
    return (secondDiff != -1 && s[firstDiff] == goal[secondDiff] && s[secondDiff] == goal[firstDiff]);
}
    
};
