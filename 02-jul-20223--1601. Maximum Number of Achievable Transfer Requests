/*-----------------------------------------code in python------------------------------------------------*/

class Solution:
    def maximumRequests(self, n: int, requests: List[List[int]]) -> int:
        for k in range(len(requests), 0,-1):
            for c in itertools.combinations(range(len(requests)),k):
                degree = [0]*n
                for i in c:
                    degree[requests[i][0]] -=1
                    degree[requests[i][1]] +=1
                if not any(degree):
                    return k
        return 0


/*----------------------------------------------code in cpp-----------------------------------------------------------------*/

class Solution {
public:
    int maximumRequests(int n, vector<vector<int>>& requests) {
        for (int k = requests.size(); k > 0; k--) {
            for (auto c : combinations(requests.size(), k)) {
                vector<int> degree(n, 0);
                for (auto i : c) {
                    degree[requests[i][0]]--;
                    degree[requests[i][1]]++;
                }
                if (all_of(degree.begin(), degree.end(), [](int d){ return d == 0; })) {
                    return k;
                }
            }
        }
        return 0;
    }

private:
    vector<vector<int>> combinations(int n, int k) {
        vector<vector<int>> res;
        vector<int> c(k, 0);
        iota(c.begin(), c.end(), 0);
        while (c[0] < n - k + 1) {
            res.push_back(c);
            int i = k - 1;
            while (i >= 0 && c[i] == n - k + i) {
                i--;
            }
            if (i < 0) {
                break;
            }
            c[i]++;
            for (int j = i + 1; j < k; j++) {
                c[j] = c[j - 1] + 1;
            }
        }
        return res;
    }
};


/*----------------------------------------------------------code in java------------------------------------------*/

import java.util.*;

class Solution {
    public int maximumRequests(int n, int[][] requests) {
        for (int k = requests.length; k > 0; k--) {
            for (int[] c : combinations(requests, k)) {
                int[] degree = new int[n];
                for (int i : c) {
                    degree[requests[i][0]] -= 1;
                    degree[requests[i][1]] += 1;
                }
                if (allZeros(degree)) {
                    return k;
                }
            }
        }
        return 0;
    }

    private boolean allZeros(int[] arr) {
        for (int i : arr) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    }

    private Iterable<int[]> combinations(int[][] arr, int k) {
        List<int[]> res = new ArrayList<>();
        combinationsHelper(arr, res, new int[k], 0, 0);
        return res;
    }

    private void combinationsHelper(int[][] arr, List<int[]> res, int[] temp, int start, int idx) {
        if (idx == temp.length) {
            res.add(temp.clone());
            return;
        }
        for (int i = start; i < arr.length; i++) {
            temp[idx] = i;
            combinationsHelper(arr, res, temp, i + 1, idx + 1);
        }
    }
}
